//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace vlaanderen.informatie
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class AdresClient 
    {
        private string _baseUrl = "https://basisregisters.vlaanderen.be/api";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public AdresClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns the details of a the latest version of a single address.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public AdresDetail GetLatestVersion(string version, string objectId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetLatestVersionAsync(version, objectId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns the details of a the latest version of a single address.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<AdresDetail> GetLatestVersionAsync(string version, string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/adressen/{ObjectId}");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ObjectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(AdresDetail); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AdresDetail>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AdresDetail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Returns a (filtered) collection of addresses. Allows searching for addresses.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listAdresRequest_gemeentenaam">filter: municipality name in Dutch</param>
        /// <param name="listAdresRequest_postcode">filter: postal code</param>
        /// <param name="listAdresRequest_straatnaam">filter: street name in Dutch</param>
        /// <param name="listAdresRequest_homoniemToevoeging">filter: homonym addition in Dutch</param>
        /// <param name="listAdresRequest_huisnummer">filter: house number</param>
        /// <param name="listAdresRequest_busnummer">filter: mailbox number</param>
        /// <param name="listAdresRequest_offset">the index of the first instance to return</param>
        /// <param name="listAdresRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public AdresCollectie Get(string version, string listAdresRequest_gemeentenaam = null, string listAdresRequest_postcode = null, string listAdresRequest_straatnaam = null, string listAdresRequest_homoniemToevoeging = null, string listAdresRequest_huisnummer = null, string listAdresRequest_busnummer = null, int? listAdresRequest_offset = null, int? listAdresRequest_limit = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAsync(version, listAdresRequest_gemeentenaam, listAdresRequest_postcode, listAdresRequest_straatnaam, listAdresRequest_homoniemToevoeging, listAdresRequest_huisnummer, listAdresRequest_busnummer, listAdresRequest_offset, listAdresRequest_limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns a (filtered) collection of addresses. Allows searching for addresses.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listAdresRequest_gemeentenaam">filter: municipality name in Dutch</param>
        /// <param name="listAdresRequest_postcode">filter: postal code</param>
        /// <param name="listAdresRequest_straatnaam">filter: street name in Dutch</param>
        /// <param name="listAdresRequest_homoniemToevoeging">filter: homonym addition in Dutch</param>
        /// <param name="listAdresRequest_huisnummer">filter: house number</param>
        /// <param name="listAdresRequest_busnummer">filter: mailbox number</param>
        /// <param name="listAdresRequest_offset">the index of the first instance to return</param>
        /// <param name="listAdresRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<AdresCollectie> GetAsync(string version, string listAdresRequest_gemeentenaam = null, string listAdresRequest_postcode = null, string listAdresRequest_straatnaam = null, string listAdresRequest_homoniemToevoeging = null, string listAdresRequest_huisnummer = null, string listAdresRequest_busnummer = null, int? listAdresRequest_offset = null, int? listAdresRequest_limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/adressen?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (listAdresRequest_gemeentenaam != null) urlBuilder_.Append("listAdresRequest.gemeentenaam=").Append(System.Uri.EscapeDataString(ConvertToString(listAdresRequest_gemeentenaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listAdresRequest_postcode != null) urlBuilder_.Append("listAdresRequest.postcode=").Append(System.Uri.EscapeDataString(ConvertToString(listAdresRequest_postcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listAdresRequest_straatnaam != null) urlBuilder_.Append("listAdresRequest.straatnaam=").Append(System.Uri.EscapeDataString(ConvertToString(listAdresRequest_straatnaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listAdresRequest_homoniemToevoeging != null) urlBuilder_.Append("listAdresRequest.homoniemToevoeging=").Append(System.Uri.EscapeDataString(ConvertToString(listAdresRequest_homoniemToevoeging, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listAdresRequest_huisnummer != null) urlBuilder_.Append("listAdresRequest.huisnummer=").Append(System.Uri.EscapeDataString(ConvertToString(listAdresRequest_huisnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listAdresRequest_busnummer != null) urlBuilder_.Append("listAdresRequest.busnummer=").Append(System.Uri.EscapeDataString(ConvertToString(listAdresRequest_busnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listAdresRequest_offset != null) urlBuilder_.Append("listAdresRequest.offset=").Append(System.Uri.EscapeDataString(ConvertToString(listAdresRequest_offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listAdresRequest_limit != null) urlBuilder_.Append("listAdresRequest.limit=").Append(System.Uri.EscapeDataString(ConvertToString(listAdresRequest_limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(AdresCollectie); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AdresCollectie>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AdresCollectie);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class AdresMatchClient 
    {
        private string _baseUrl = "https://basisregisters.vlaanderen.be/api";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public AdresMatchClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns a collection of matching addresses based on the input of address components.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="adresMatchRequest_gemeentenaam">municipality name</param>
        /// <param name="adresMatchRequest_niscode">municipality code as known by the National Statistics Institute</param>
        /// <param name="adresMatchRequest_postcode">postal code</param>
        /// <param name="adresMatchRequest_kadStraatcode">street code as known by the Patrimonium Service</param>
        /// <param name="adresMatchRequest_rrStraatcode">street code as known by the National Register</param>
        /// <param name="adresMatchRequest_straatnaam">street name</param>
        /// <param name="adresMatchRequest_huisnummer">house number</param>
        /// <param name="adresMatchRequest_index">house number addition as known by the National Register</param>
        /// <param name="adresMatchRequest_busnummer">bus number to be interpreted litterally</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public AdresMatchCollectie Get(string version, string adresMatchRequest_gemeentenaam = null, string adresMatchRequest_niscode = null, string adresMatchRequest_postcode = null, string adresMatchRequest_kadStraatcode = null, string adresMatchRequest_rrStraatcode = null, string adresMatchRequest_straatnaam = null, string adresMatchRequest_huisnummer = null, string adresMatchRequest_index = null, string adresMatchRequest_busnummer = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAsync(version, adresMatchRequest_gemeentenaam, adresMatchRequest_niscode, adresMatchRequest_postcode, adresMatchRequest_kadStraatcode, adresMatchRequest_rrStraatcode, adresMatchRequest_straatnaam, adresMatchRequest_huisnummer, adresMatchRequest_index, adresMatchRequest_busnummer, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns a collection of matching addresses based on the input of address components.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="adresMatchRequest_gemeentenaam">municipality name</param>
        /// <param name="adresMatchRequest_niscode">municipality code as known by the National Statistics Institute</param>
        /// <param name="adresMatchRequest_postcode">postal code</param>
        /// <param name="adresMatchRequest_kadStraatcode">street code as known by the Patrimonium Service</param>
        /// <param name="adresMatchRequest_rrStraatcode">street code as known by the National Register</param>
        /// <param name="adresMatchRequest_straatnaam">street name</param>
        /// <param name="adresMatchRequest_huisnummer">house number</param>
        /// <param name="adresMatchRequest_index">house number addition as known by the National Register</param>
        /// <param name="adresMatchRequest_busnummer">bus number to be interpreted litterally</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<AdresMatchCollectie> GetAsync(string version, string adresMatchRequest_gemeentenaam = null, string adresMatchRequest_niscode = null, string adresMatchRequest_postcode = null, string adresMatchRequest_kadStraatcode = null, string adresMatchRequest_rrStraatcode = null, string adresMatchRequest_straatnaam = null, string adresMatchRequest_huisnummer = null, string adresMatchRequest_index = null, string adresMatchRequest_busnummer = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/adresmatch?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (adresMatchRequest_gemeentenaam != null) urlBuilder_.Append("adresMatchRequest.gemeentenaam=").Append(System.Uri.EscapeDataString(ConvertToString(adresMatchRequest_gemeentenaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (adresMatchRequest_niscode != null) urlBuilder_.Append("adresMatchRequest.niscode=").Append(System.Uri.EscapeDataString(ConvertToString(adresMatchRequest_niscode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (adresMatchRequest_postcode != null) urlBuilder_.Append("adresMatchRequest.postcode=").Append(System.Uri.EscapeDataString(ConvertToString(adresMatchRequest_postcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (adresMatchRequest_kadStraatcode != null) urlBuilder_.Append("adresMatchRequest.kadStraatcode=").Append(System.Uri.EscapeDataString(ConvertToString(adresMatchRequest_kadStraatcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (adresMatchRequest_rrStraatcode != null) urlBuilder_.Append("adresMatchRequest.rrStraatcode=").Append(System.Uri.EscapeDataString(ConvertToString(adresMatchRequest_rrStraatcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (adresMatchRequest_straatnaam != null) urlBuilder_.Append("adresMatchRequest.straatnaam=").Append(System.Uri.EscapeDataString(ConvertToString(adresMatchRequest_straatnaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (adresMatchRequest_huisnummer != null) urlBuilder_.Append("adresMatchRequest.huisnummer=").Append(System.Uri.EscapeDataString(ConvertToString(adresMatchRequest_huisnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (adresMatchRequest_index != null) urlBuilder_.Append("adresMatchRequest.index=").Append(System.Uri.EscapeDataString(ConvertToString(adresMatchRequest_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (adresMatchRequest_busnummer != null) urlBuilder_.Append("adresMatchRequest.busnummer=").Append(System.Uri.EscapeDataString(ConvertToString(adresMatchRequest_busnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
           //System.Windows.Forms.MessageBox.Show(  urlBuilder_.ToString( )  );
            
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(AdresMatchCollectie); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AdresMatchCollectie>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AdresMatchCollectie);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CrabHuisnummerClient 
    {
        private string _baseUrl = "https://basisregisters.vlaanderen.be/api";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public CrabHuisnummerClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns a collection of CRAB house numbers and related addresses</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="request_objectId">filter: the CRAB HuisnummerId</param>
        /// <param name="request_offset">the index of the first instance to return</param>
        /// <param name="request_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public CrabHuisnummerCollectie Get(string version, int? request_objectId = null, int? request_offset = null, int? request_limit = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAsync(version, request_objectId, request_offset, request_limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns a collection of CRAB house numbers and related addresses</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="request_objectId">filter: the CRAB HuisnummerId</param>
        /// <param name="request_offset">the index of the first instance to return</param>
        /// <param name="request_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CrabHuisnummerCollectie> GetAsync(string version, int? request_objectId = null, int? request_offset = null, int? request_limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/crabhuisnummers?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (request_objectId != null) urlBuilder_.Append("request.objectId=").Append(System.Uri.EscapeDataString(ConvertToString(request_objectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (request_offset != null) urlBuilder_.Append("request.offset=").Append(System.Uri.EscapeDataString(ConvertToString(request_offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (request_limit != null) urlBuilder_.Append("request.limit=").Append(System.Uri.EscapeDataString(ConvertToString(request_limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CrabHuisnummerCollectie); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CrabHuisnummerCollectie>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CrabHuisnummerCollectie);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CrabSubadresClient 
    {
        private string _baseUrl = "https://basisregisters.vlaanderen.be/api";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public CrabSubadresClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns a collection of CRAB subaddresses and related addresses</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listCrabSubadresRequest_objectId">filter: the CRAB SubadresId</param>
        /// <param name="listCrabSubadresRequest_offset">the index of the first instance to return</param>
        /// <param name="listCrabSubadresRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public CrabSubadresCollectie Get(string version, int? listCrabSubadresRequest_objectId = null, int? listCrabSubadresRequest_offset = null, int? listCrabSubadresRequest_limit = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAsync(version, listCrabSubadresRequest_objectId, listCrabSubadresRequest_offset, listCrabSubadresRequest_limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns a collection of CRAB subaddresses and related addresses</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listCrabSubadresRequest_objectId">filter: the CRAB SubadresId</param>
        /// <param name="listCrabSubadresRequest_offset">the index of the first instance to return</param>
        /// <param name="listCrabSubadresRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CrabSubadresCollectie> GetAsync(string version, int? listCrabSubadresRequest_objectId = null, int? listCrabSubadresRequest_offset = null, int? listCrabSubadresRequest_limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/crabsubadressen?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (listCrabSubadresRequest_objectId != null) urlBuilder_.Append("listCrabSubadresRequest.objectId=").Append(System.Uri.EscapeDataString(ConvertToString(listCrabSubadresRequest_objectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listCrabSubadresRequest_offset != null) urlBuilder_.Append("listCrabSubadresRequest.offset=").Append(System.Uri.EscapeDataString(ConvertToString(listCrabSubadresRequest_offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listCrabSubadresRequest_limit != null) urlBuilder_.Append("listCrabSubadresRequest.limit=").Append(System.Uri.EscapeDataString(ConvertToString(listCrabSubadresRequest_limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CrabSubadresCollectie); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CrabSubadresCollectie>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CrabSubadresCollectie);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class GebouwClient 
    {
        private string _baseUrl = "https://basisregisters.vlaanderen.be/api";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public GebouwClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns the details of the latest version of a single building.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public GebouwDetail GetLatestVersion(string version, string objectId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetLatestVersionAsync(version, objectId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns the details of the latest version of a single building.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GebouwDetail> GetLatestVersionAsync(string version, string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/gebouwen/{ObjectId}");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ObjectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GebouwDetail); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GebouwDetail>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GebouwDetail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Returns a collection of buildings.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listGebouwRequest_offset">the index of the first instance to return</param>
        /// <param name="listGebouwRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public GebouwCollectie Get(string version, int? listGebouwRequest_offset = null, int? listGebouwRequest_limit = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAsync(version, listGebouwRequest_offset, listGebouwRequest_limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns a collection of buildings.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listGebouwRequest_offset">the index of the first instance to return</param>
        /// <param name="listGebouwRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GebouwCollectie> GetAsync(string version, int? listGebouwRequest_offset = null, int? listGebouwRequest_limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/gebouwen?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (listGebouwRequest_offset != null) urlBuilder_.Append("listGebouwRequest.offset=").Append(System.Uri.EscapeDataString(ConvertToString(listGebouwRequest_offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listGebouwRequest_limit != null) urlBuilder_.Append("listGebouwRequest.limit=").Append(System.Uri.EscapeDataString(ConvertToString(listGebouwRequest_limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GebouwCollectie); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GebouwCollectie>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GebouwCollectie);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class GebouweenheidClient 
    {
        private string _baseUrl = "https://basisregisters.vlaanderen.be/api";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public GebouweenheidClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns the details of the latest version of a single building unit.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public GebouweenheidDetail GetLatestVersion(string version, string objectid)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetLatestVersionAsync(version, objectid, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns the details of the latest version of a single building unit.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GebouweenheidDetail> GetLatestVersionAsync(string version, string objectid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            if (objectid == null)
                throw new System.ArgumentNullException("objectid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/gebouweenheden/{ObjectId}?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("objectid=").Append(System.Uri.EscapeDataString(ConvertToString(objectid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GebouweenheidDetail); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GebouweenheidDetail>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GebouweenheidDetail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Returns a collection of building units.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="request_adresObjectId">filter: the object identifier of the coupled address</param>
        /// <param name="request_offset">the index of the first instance to return</param>
        /// <param name="request_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public GebouweenheidCollectie Get(string version, string request_adresObjectId = null, int? request_offset = null, int? request_limit = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAsync(version, request_adresObjectId, request_offset, request_limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns a collection of building units.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="request_adresObjectId">filter: the object identifier of the coupled address</param>
        /// <param name="request_offset">the index of the first instance to return</param>
        /// <param name="request_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GebouweenheidCollectie> GetAsync(string version, string request_adresObjectId = null, int? request_offset = null, int? request_limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/gebouweenheden?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (request_adresObjectId != null) urlBuilder_.Append("request.adresObjectId=").Append(System.Uri.EscapeDataString(ConvertToString(request_adresObjectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (request_offset != null) urlBuilder_.Append("request.offset=").Append(System.Uri.EscapeDataString(ConvertToString(request_offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (request_limit != null) urlBuilder_.Append("request.limit=").Append(System.Uri.EscapeDataString(ConvertToString(request_limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GebouweenheidCollectie); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GebouweenheidCollectie>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GebouweenheidCollectie);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class GemeenteClient 
    {
        private string _baseUrl = "https://basisregisters.vlaanderen.be/api";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public GemeenteClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns the details of the latest version of a single municipality.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public GemeenteDetail GetLatestVersion(string version, string objectId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetLatestVersionAsync(version, objectId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns the details of the latest version of a single municipality.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GemeenteDetail> GetLatestVersionAsync(string version, string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/gemeenten/{ObjectId}");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ObjectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GemeenteDetail); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GemeenteDetail>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GemeenteDetail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Returns a collection of municipalities.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listGemeenteRequest_offset">the index of the first instance to return</param>
        /// <param name="listGemeenteRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public GemeenteCollectie Get(string version, int? listGemeenteRequest_offset = null, int? listGemeenteRequest_limit = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAsync(version, listGemeenteRequest_offset, listGemeenteRequest_limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns a collection of municipalities.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listGemeenteRequest_offset">the index of the first instance to return</param>
        /// <param name="listGemeenteRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GemeenteCollectie> GetAsync(string version, int? listGemeenteRequest_offset = null, int? listGemeenteRequest_limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/gemeenten?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (listGemeenteRequest_offset != null) urlBuilder_.Append("listGemeenteRequest.offset=").Append(System.Uri.EscapeDataString(ConvertToString(listGemeenteRequest_offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listGemeenteRequest_limit != null) urlBuilder_.Append("listGemeenteRequest.limit=").Append(System.Uri.EscapeDataString(ConvertToString(listGemeenteRequest_limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GemeenteCollectie); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GemeenteCollectie>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GemeenteCollectie);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PerceelClient 
    {
        private string _baseUrl = "https://basisregisters.vlaanderen.be/api";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public PerceelClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns the details of the latest version of a single parcel.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public PerceelDetail GetLatestVersion(string version, string objectid)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetLatestVersionAsync(version, objectid, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns the details of the latest version of a single parcel.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PerceelDetail> GetLatestVersionAsync(string version, string objectid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            if (objectid == null)
                throw new System.ArgumentNullException("objectid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/percelen/{ObjectId}?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("objectid=").Append(System.Uri.EscapeDataString(ConvertToString(objectid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PerceelDetail); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PerceelDetail>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PerceelDetail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Returns a collection of parcels.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listPerceelRequest_offset">the index of the first instance to return</param>
        /// <param name="listPerceelRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public PerceelCollectie Get(string version, int? listPerceelRequest_offset = null, int? listPerceelRequest_limit = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAsync(version, listPerceelRequest_offset, listPerceelRequest_limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns a collection of parcels.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listPerceelRequest_offset">the index of the first instance to return</param>
        /// <param name="listPerceelRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PerceelCollectie> GetAsync(string version, int? listPerceelRequest_offset = null, int? listPerceelRequest_limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/percelen?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (listPerceelRequest_offset != null) urlBuilder_.Append("listPerceelRequest.offset=").Append(System.Uri.EscapeDataString(ConvertToString(listPerceelRequest_offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listPerceelRequest_limit != null) urlBuilder_.Append("listPerceelRequest.limit=").Append(System.Uri.EscapeDataString(ConvertToString(listPerceelRequest_limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PerceelCollectie); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PerceelCollectie>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PerceelCollectie);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PostinfoClient 
    {
        private string _baseUrl = "https://basisregisters.vlaanderen.be/api";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public PostinfoClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns the details of the latest version of a single postal information object.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public PostinfoDetail GetLatestVersion(string version, string objectId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetLatestVersionAsync(version, objectId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns the details of the latest version of a single postal information object.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PostinfoDetail> GetLatestVersionAsync(string version, string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/postinfo/{ObjectId}");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ObjectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PostinfoDetail); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PostinfoDetail>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PostinfoDetail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Returns a (filtered) collection of postal information objects.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listPostinfoRequest_gemeentenaam">filter: municipality name in Dutch</param>
        /// <param name="listPostinfoRequest_offset">the index of the first instance to return</param>
        /// <param name="listPostinfoRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public PostinfoCollectie Get(string version, string listPostinfoRequest_gemeentenaam = null, int? listPostinfoRequest_offset = null, int? listPostinfoRequest_limit = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAsync(version, listPostinfoRequest_gemeentenaam, listPostinfoRequest_offset, listPostinfoRequest_limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns a (filtered) collection of postal information objects.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listPostinfoRequest_gemeentenaam">filter: municipality name in Dutch</param>
        /// <param name="listPostinfoRequest_offset">the index of the first instance to return</param>
        /// <param name="listPostinfoRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PostinfoCollectie> GetAsync(string version, string listPostinfoRequest_gemeentenaam = null, int? listPostinfoRequest_offset = null, int? listPostinfoRequest_limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/postinfo?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (listPostinfoRequest_gemeentenaam != null) urlBuilder_.Append("listPostinfoRequest.gemeentenaam=").Append(System.Uri.EscapeDataString(ConvertToString(listPostinfoRequest_gemeentenaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listPostinfoRequest_offset != null) urlBuilder_.Append("listPostinfoRequest.offset=").Append(System.Uri.EscapeDataString(ConvertToString(listPostinfoRequest_offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listPostinfoRequest_limit != null) urlBuilder_.Append("listPostinfoRequest.limit=").Append(System.Uri.EscapeDataString(ConvertToString(listPostinfoRequest_limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PostinfoCollectie); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PostinfoCollectie>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PostinfoCollectie);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class StraatnaamClient 
    {
        private string _baseUrl = "https://basisregisters.vlaanderen.be/api";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public StraatnaamClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns the details of the latest version of a single street name.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public StraatnaamDetail GetLatestVersion(string version, string objectId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetLatestVersionAsync(version, objectId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns the details of the latest version of a single street name.</summary>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<StraatnaamDetail> GetLatestVersionAsync(string version, string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/straatnamen/{ObjectId}");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ObjectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(StraatnaamDetail); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<StraatnaamDetail>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(StraatnaamDetail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Returns a (filtered) collection of street names.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listStraatnaamRequest_gemeentenaam">filter: municipality name in Dutch</param>
        /// <param name="listStraatnaamRequest_offset">the index of the first instance to return</param>
        /// <param name="listStraatnaamRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public StraatnaamCollectie Get(string version, string listStraatnaamRequest_gemeentenaam = null, int? listStraatnaamRequest_offset = null, int? listStraatnaamRequest_limit = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAsync(version, listStraatnaamRequest_gemeentenaam, listStraatnaamRequest_offset, listStraatnaamRequest_limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Returns a (filtered) collection of street names.</summary>
        /// <param name="version">The requested API version</param>
        /// <param name="listStraatnaamRequest_gemeentenaam">filter: municipality name in Dutch</param>
        /// <param name="listStraatnaamRequest_offset">the index of the first instance to return</param>
        /// <param name="listStraatnaamRequest_limit">the maximum number of instances to return</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<StraatnaamCollectie> GetAsync(string version, string listStraatnaamRequest_gemeentenaam = null, int? listStraatnaamRequest_offset = null, int? listStraatnaamRequest_limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/straatnamen?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (listStraatnaamRequest_gemeentenaam != null) urlBuilder_.Append("listStraatnaamRequest.gemeentenaam=").Append(System.Uri.EscapeDataString(ConvertToString(listStraatnaamRequest_gemeentenaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listStraatnaamRequest_offset != null) urlBuilder_.Append("listStraatnaamRequest.offset=").Append(System.Uri.EscapeDataString(ConvertToString(listStraatnaamRequest_offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listStraatnaamRequest_limit != null) urlBuilder_.Append("listStraatnaamRequest.limit=").Append(System.Uri.EscapeDataString(ConvertToString(listStraatnaamRequest_limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(StraatnaamCollectie); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<StraatnaamCollectie>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(StraatnaamCollectie);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LatestAdresRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
    
        /// <summary>the object identifier of the address</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LatestAdresRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LatestAdresRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresDetail : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private AdresDetailGemeente _gemeente = new AdresDetailGemeente();
        private AdresDetailPostinfo _postinfo;
        private AdresDetailStraatnaam _straatnaam = new AdresDetailStraatnaam();
        private HomoniemToevoeging _homoniemToevoeging;
        private string _huisnummer;
        private string _busnummer;
        private VolledigAdres _volledigAdres = new VolledigAdres();
        private Point _adresPositie = new Point();
        private AdresDetailPositieGeometrieMethode _positieGeometrieMethode;
        private AdresDetailPositieSpecificatie _positieSpecificatie;
        private AdresDetailAdresStatus _adresStatus;
        private bool _officieelToegekend;
    
        /// <summary>the identifier of the address</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>municipality that is part of the address</summary>
        [Newtonsoft.Json.JsonProperty("gemeente", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AdresDetailGemeente Gemeente
        {
            get { return _gemeente; }
            set 
            {
                if (_gemeente != value)
                {
                    _gemeente = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>postal information object that is part of the address</summary>
        [Newtonsoft.Json.JsonProperty("postinfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresDetailPostinfo Postinfo
        {
            get { return _postinfo; }
            set 
            {
                if (_postinfo != value)
                {
                    _postinfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>street name that is part of the address</summary>
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AdresDetailStraatnaam Straatnaam
        {
            get { return _straatnaam; }
            set 
            {
                if (_straatnaam != value)
                {
                    _straatnaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>homonym addition to the street name</summary>
        [Newtonsoft.Json.JsonProperty("homoniemToevoeging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomoniemToevoeging HomoniemToevoeging
        {
            get { return _homoniemToevoeging; }
            set 
            {
                if (_homoniemToevoeging != value)
                {
                    _homoniemToevoeging = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the house number</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Huisnummer
        {
            get { return _huisnummer; }
            set 
            {
                if (_huisnummer != value)
                {
                    _huisnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the mailbox number</summary>
        [Newtonsoft.Json.JsonProperty("busnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Busnummer
        {
            get { return _busnummer; }
            set 
            {
                if (_busnummer != value)
                {
                    _busnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the representation of an address in dutch</summary>
        [Newtonsoft.Json.JsonProperty("volledigAdres", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public VolledigAdres VolledigAdres
        {
            get { return _volledigAdres; }
            set 
            {
                if (_volledigAdres != value)
                {
                    _volledigAdres = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the address position (a point with Lambert-72 coordinates)</summary>
        [Newtonsoft.Json.JsonProperty("adresPositie", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Point AdresPositie
        {
            get { return _adresPositie; }
            set 
            {
                if (_adresPositie != value)
                {
                    _adresPositie = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the method used to provide the position</summary>
        [Newtonsoft.Json.JsonProperty("positieGeometrieMethode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdresDetailPositieGeometrieMethode PositieGeometrieMethode
        {
            get { return _positieGeometrieMethode; }
            set 
            {
                if (_positieGeometrieMethode != value)
                {
                    _positieGeometrieMethode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the specification of the object represented by the position</summary>
        [Newtonsoft.Json.JsonProperty("positieSpecificatie", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdresDetailPositieSpecificatie PositieSpecificatie
        {
            get { return _positieSpecificatie; }
            set 
            {
                if (_positieSpecificatie != value)
                {
                    _positieSpecificatie = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the current phase in the lifecycle of the address</summary>
        [Newtonsoft.Json.JsonProperty("adresStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdresDetailAdresStatus AdresStatus
        {
            get { return _adresStatus; }
            set 
            {
                if (_adresStatus != value)
                {
                    _adresStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>false if the existence of the address was not known within administrative procedures but only after observation on site</summary>
        [Newtonsoft.Json.JsonProperty("officieelToegekend", Required = Newtonsoft.Json.Required.Always)]
        public bool OfficieelToegekend
        {
            get { return _officieelToegekend; }
            set 
            {
                if (_officieelToegekend != value)
                {
                    _officieelToegekend = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresDetail>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains identification information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Identificator : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _naamruimte;
        private string _objectId;
        private int _versieId;
    
        /// <summary>the persistent identifier of the object (Flemish URI standard compliant), unique within the scope of the world wide web</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the namespace, uniquely identifying the resource within the scope of the world wide web</summary>
        [Newtonsoft.Json.JsonProperty("naamruimte", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Naamruimte
        {
            get { return _naamruimte; }
            set 
            {
                if (_naamruimte != value)
                {
                    _naamruimte = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the object identifier, unique within the scope of the namespace</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the object version identifier, unique within the scope of the object</summary>
        [Newtonsoft.Json.JsonProperty("versieId", Required = Newtonsoft.Json.Required.Always)]
        public int VersieId
        {
            get { return _versieId; }
            set 
            {
                if (_versieId != value)
                {
                    _versieId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Identificator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Identificator>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresDetailGemeente : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
        private Gemeentenaam _gemeentenaam = new Gemeentenaam();
    
        /// <summary>the object identifier of the coupled municipality</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled municipality</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the municipality name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Gemeentenaam Gemeentenaam
        {
            get { return _gemeentenaam; }
            set 
            {
                if (_gemeentenaam != value)
                {
                    _gemeentenaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresDetailGemeente FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresDetailGemeente>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresDetailPostinfo : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
    
        /// <summary>the object identifier of the coupled postal information object</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled postal information object</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresDetailPostinfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresDetailPostinfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresDetailStraatnaam : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
        private Straatnaam _straatnaam = new Straatnaam();
    
        /// <summary>the object identifier of the coupled street name</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled street name</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the street name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Straatnaam Straatnaam
        {
            get { return _straatnaam; }
            set 
            {
                if (_straatnaam != value)
                {
                    _straatnaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresDetailStraatnaam FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresDetailStraatnaam>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HomoniemToevoeging : System.ComponentModel.INotifyPropertyChanged
    {
        private GeografischeNaam _geografischeNaam;
    
        /// <summary>The geographical name</summary>
        [Newtonsoft.Json.JsonProperty("geografischeNaam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeografischeNaam GeografischeNaam
        {
            get { return _geografischeNaam; }
            set 
            {
                if (_geografischeNaam != value)
                {
                    _geografischeNaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HomoniemToevoeging FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HomoniemToevoeging>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VolledigAdres : System.ComponentModel.INotifyPropertyChanged
    {
        private GeografischeNaam _geografischeNaam = new GeografischeNaam();
    
        /// <summary>the geographical name</summary>
        [Newtonsoft.Json.JsonProperty("geografischeNaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeografischeNaam GeografischeNaam
        {
            get { return _geografischeNaam; }
            set 
            {
                if (_geografischeNaam != value)
                {
                    _geografischeNaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VolledigAdres FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VolledigAdres>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>depending on the Content-Type a GML3 point or a GeoJSON point</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Point : System.ComponentModel.INotifyPropertyChanged
    {
        private GeoJSONPoint _point1;
    
        /// <summary>a GeoJSON point</summary>
        [Newtonsoft.Json.JsonProperty("point", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoJSONPoint Point1
        {
            get { return _point1; }
            set 
            {
                if (_point1 != value)
                {
                    _point1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Point FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Point>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Gemeentenaam : System.ComponentModel.INotifyPropertyChanged
    {
        private GeografischeNaam _geografischeNaam = new GeografischeNaam();
    
        /// <summary>the geographical name</summary>
        [Newtonsoft.Json.JsonProperty("geografischeNaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeografischeNaam GeografischeNaam
        {
            get { return _geografischeNaam; }
            set 
            {
                if (_geografischeNaam != value)
                {
                    _geografischeNaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Gemeentenaam FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Gemeentenaam>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Straatnaam : System.ComponentModel.INotifyPropertyChanged
    {
        private GeografischeNaam _geografischeNaam = new GeografischeNaam();
    
        /// <summary>the geographical name</summary>
        [Newtonsoft.Json.JsonProperty("geografischeNaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeografischeNaam GeografischeNaam
        {
            get { return _geografischeNaam; }
            set 
            {
                if (_geografischeNaam != value)
                {
                    _geografischeNaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Straatnaam FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Straatnaam>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>The geographical name</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeografischeNaam : System.ComponentModel.INotifyPropertyChanged
    {
        private string _spelling;
        private GeografischeNaamTaal _taal;
    
        /// <summary>the spelling of the geographical name in the specified language</summary>
        [Newtonsoft.Json.JsonProperty("spelling", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Spelling
        {
            get { return _spelling; }
            set 
            {
                if (_spelling != value)
                {
                    _spelling = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the language the geographical name is described in</summary>
        [Newtonsoft.Json.JsonProperty("taal", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeografischeNaamTaal Taal
        {
            get { return _taal; }
            set 
            {
                if (_taal != value)
                {
                    _taal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeografischeNaam FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeografischeNaam>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeoJSONPoint : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<double> _coordinates;
        private string _type;
        private Crs _crs;
    
        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> Coordinates
        {
            get { return _coordinates; }
            set 
            {
                if (_coordinates != value)
                {
                    _coordinates = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("crs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Crs Crs
        {
            get { return _crs; }
            set 
            {
                if (_crs != value)
                {
                    _crs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoJSONPoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoJSONPoint>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Crs : System.ComponentModel.INotifyPropertyChanged
    {
        private string _type;
        private object _properties;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Properties
        {
            get { return _properties; }
            set 
            {
                if (_properties != value)
                {
                    _properties = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Crs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Crs>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Request parameters for GET adres</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListAdresRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _gemeentenaam;
        private string _postcode;
        private string _straatnaam;
        private string _homoniemToevoeging;
        private string _huisnummer;
        private string _busnummer;
        private int? _offset;
        private int? _limit;
    
        /// <summary>filter: municipality name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gemeentenaam
        {
            get { return _gemeentenaam; }
            set 
            {
                if (_gemeentenaam != value)
                {
                    _gemeentenaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>filter: postal code</summary>
        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postcode
        {
            get { return _postcode; }
            set 
            {
                if (_postcode != value)
                {
                    _postcode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>filter: street name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Straatnaam
        {
            get { return _straatnaam; }
            set 
            {
                if (_straatnaam != value)
                {
                    _straatnaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>filter: homonym addition in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("homoniemToevoeging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomoniemToevoeging
        {
            get { return _homoniemToevoeging; }
            set 
            {
                if (_homoniemToevoeging != value)
                {
                    _homoniemToevoeging = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>filter: house number</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Huisnummer
        {
            get { return _huisnummer; }
            set 
            {
                if (_huisnummer != value)
                {
                    _huisnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>filter: mailbox number</summary>
        [Newtonsoft.Json.JsonProperty("busnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Busnummer
        {
            get { return _busnummer; }
            set 
            {
                if (_busnummer != value)
                {
                    _busnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the index of the first instance to return</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Offset
        {
            get { return _offset; }
            set 
            {
                if (_offset != value)
                {
                    _offset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the maximum number of instances to return</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 3500)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListAdresRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListAdresRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresCollectie : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<AdresCollectieItem> _adressen = new System.Collections.ObjectModel.ObservableCollection<AdresCollectieItem>();
        private long _totaalAantal;
        private string _volgende;
    
        /// <summary>collection of address instances (count lower or equal to limit)</summary>
        [Newtonsoft.Json.JsonProperty("adressen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<AdresCollectieItem> Adressen
        {
            get { return _adressen; }
            set 
            {
                if (_adressen != value)
                {
                    _adressen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the total number of addresses matching the request</summary>
        [Newtonsoft.Json.JsonProperty("totaalAantal", Required = Newtonsoft.Json.Required.Always)]
        public long TotaalAantal
        {
            get { return _totaalAantal; }
            set 
            {
                if (_totaalAantal != value)
                {
                    _totaalAantal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL for retrieving the next subset</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Volgende
        {
            get { return _volgende; }
            set 
            {
                if (_volgende != value)
                {
                    _volgende = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresCollectie FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresCollectie>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresCollectieItem : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private string _detail;
        private string _huisnummer;
        private string _busnummer;
        private VolledigAdres _volledigAdres = new VolledigAdres();
    
        /// <summary>the identifier of the address</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the address</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the house number</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Huisnummer
        {
            get { return _huisnummer; }
            set 
            {
                if (_huisnummer != value)
                {
                    _huisnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the mailbox number</summary>
        [Newtonsoft.Json.JsonProperty("busnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Busnummer
        {
            get { return _busnummer; }
            set 
            {
                if (_busnummer != value)
                {
                    _busnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the representation of an address in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("volledigAdres", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public VolledigAdres VolledigAdres
        {
            get { return _volledigAdres; }
            set 
            {
                if (_volledigAdres != value)
                {
                    _volledigAdres = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresCollectieItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresCollectieItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresMatchRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _gemeentenaam;
        private string _niscode;
        private string _postcode;
        private string _kadStraatcode;
        private string _rrStraatcode;
        private string _straatnaam;
        private string _huisnummer;
        private string _index;
        private string _busnummer;
    
        /// <summary>municipality name</summary>
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gemeentenaam
        {
            get { return _gemeentenaam; }
            set 
            {
                if (_gemeentenaam != value)
                {
                    _gemeentenaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>municipality code as known by the National Statistics Institute</summary>
        [Newtonsoft.Json.JsonProperty("niscode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Niscode
        {
            get { return _niscode; }
            set 
            {
                if (_niscode != value)
                {
                    _niscode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>postal code</summary>
        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postcode
        {
            get { return _postcode; }
            set 
            {
                if (_postcode != value)
                {
                    _postcode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>street code as known by the Patrimonium Service</summary>
        [Newtonsoft.Json.JsonProperty("kadStraatcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KadStraatcode
        {
            get { return _kadStraatcode; }
            set 
            {
                if (_kadStraatcode != value)
                {
                    _kadStraatcode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>street code as known by the National Register</summary>
        [Newtonsoft.Json.JsonProperty("rrStraatcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RrStraatcode
        {
            get { return _rrStraatcode; }
            set 
            {
                if (_rrStraatcode != value)
                {
                    _rrStraatcode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>street name</summary>
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Straatnaam
        {
            get { return _straatnaam; }
            set 
            {
                if (_straatnaam != value)
                {
                    _straatnaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>house number</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Huisnummer
        {
            get { return _huisnummer; }
            set 
            {
                if (_huisnummer != value)
                {
                    _huisnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>house number addition as known by the National Register</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index
        {
            get { return _index; }
            set 
            {
                if (_index != value)
                {
                    _index = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>bus number to be interpreted litterally</summary>
        [Newtonsoft.Json.JsonProperty("busnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Busnummer
        {
            get { return _busnummer; }
            set 
            {
                if (_busnummer != value)
                {
                    _busnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresMatchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresMatchRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresMatchCollectie : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<AdresMatchItem> _adresMatches = new System.Collections.ObjectModel.ObservableCollection<AdresMatchItem>();
        private System.Collections.ObjectModel.ObservableCollection<ValidationMessage> _warnings;
    
        /// <summary>the first 10 found address matches</summary>
        [Newtonsoft.Json.JsonProperty("adresMatches", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<AdresMatchItem> AdresMatches
        {
            get { return _adresMatches; }
            set 
            {
                if (_adresMatches != value)
                {
                    _adresMatches = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>contains warnings concerning conflicting information in the input</summary>
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ValidationMessage> Warnings
        {
            get { return _warnings; }
            set 
            {
                if (_warnings != value)
                {
                    _warnings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresMatchCollectie FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresMatchCollectie>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresMatchItem : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator;
        private string _detail;
        private AdresMatchItemGemeente _gemeente = new AdresMatchItemGemeente();
        private AdresMatchItemPostinfo _postinfo;
        private AdresMatchItemStraatnaam _straatnaam;
        private HomoniemToevoeging _homoniemToevoeging;
        private string _huisnummer;
        private string _busnummer;
        private VolledigAdres _volledigAdres;
        private Point _adresPositie;
        private AdresMatchItemPositieSpecificatie? _positieSpecificatie;
        private AdresMatchItemPositieGeometrieMethode? _positieGeometrieMethode;
        private AdresMatchItemAdresStatus? _adresStatus;
        private bool? _officieelToegekend;
        private System.Collections.ObjectModel.ObservableCollection<AdresseerbaarObject> _adresseerbareObjecten;
        private double? _score;
    
        /// <summary>the identifier of the address</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the address</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>municipality that is part of the address</summary>
        [Newtonsoft.Json.JsonProperty("gemeente", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AdresMatchItemGemeente Gemeente
        {
            get { return _gemeente; }
            set 
            {
                if (_gemeente != value)
                {
                    _gemeente = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>postal information object that is part of the address</summary>
        [Newtonsoft.Json.JsonProperty("postinfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresMatchItemPostinfo Postinfo
        {
            get { return _postinfo; }
            set 
            {
                if (_postinfo != value)
                {
                    _postinfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>street name that is part of the address</summary>
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresMatchItemStraatnaam Straatnaam
        {
            get { return _straatnaam; }
            set 
            {
                if (_straatnaam != value)
                {
                    _straatnaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>homonym addition to the street name</summary>
        [Newtonsoft.Json.JsonProperty("homoniemToevoeging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomoniemToevoeging HomoniemToevoeging
        {
            get { return _homoniemToevoeging; }
            set 
            {
                if (_homoniemToevoeging != value)
                {
                    _homoniemToevoeging = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the house number</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Huisnummer
        {
            get { return _huisnummer; }
            set 
            {
                if (_huisnummer != value)
                {
                    _huisnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the mailbox number</summary>
        [Newtonsoft.Json.JsonProperty("busnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Busnummer
        {
            get { return _busnummer; }
            set 
            {
                if (_busnummer != value)
                {
                    _busnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the representation of an address in dutch</summary>
        [Newtonsoft.Json.JsonProperty("volledigAdres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VolledigAdres VolledigAdres
        {
            get { return _volledigAdres; }
            set 
            {
                if (_volledigAdres != value)
                {
                    _volledigAdres = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the address position</summary>
        [Newtonsoft.Json.JsonProperty("adresPositie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Point AdresPositie
        {
            get { return _adresPositie; }
            set 
            {
                if (_adresPositie != value)
                {
                    _adresPositie = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the specification of the object represented by the position</summary>
        [Newtonsoft.Json.JsonProperty("positieSpecificatie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdresMatchItemPositieSpecificatie? PositieSpecificatie
        {
            get { return _positieSpecificatie; }
            set 
            {
                if (_positieSpecificatie != value)
                {
                    _positieSpecificatie = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the method used to provide the position</summary>
        [Newtonsoft.Json.JsonProperty("positieGeometrieMethode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdresMatchItemPositieGeometrieMethode? PositieGeometrieMethode
        {
            get { return _positieGeometrieMethode; }
            set 
            {
                if (_positieGeometrieMethode != value)
                {
                    _positieGeometrieMethode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the current phase in the lifecycle of the address</summary>
        [Newtonsoft.Json.JsonProperty("adresStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdresMatchItemAdresStatus? AdresStatus
        {
            get { return _adresStatus; }
            set 
            {
                if (_adresStatus != value)
                {
                    _adresStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>true if the existence of the address was not known within administrative procedures but only after observation on site</summary>
        [Newtonsoft.Json.JsonProperty("officieelToegekend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OfficieelToegekend
        {
            get { return _officieelToegekend; }
            set 
            {
                if (_officieelToegekend != value)
                {
                    _officieelToegekend = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>resources that are coupled to the address</summary>
        [Newtonsoft.Json.JsonProperty("adresseerbareObjecten", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AdresseerbaarObject> AdresseerbareObjecten
        {
            get { return _adresseerbareObjecten; }
            set 
            {
                if (_adresseerbareObjecten != value)
                {
                    _adresseerbareObjecten = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the grade of similarity between the found address and the input address components</summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 100.0D)]
        public double? Score
        {
            get { return _score; }
            set 
            {
                if (_score != value)
                {
                    _score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresMatchItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresMatchItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>contains a warning message in dutch and english</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ValidationMessage : System.ComponentModel.INotifyPropertyChanged
    {
        private string _code;
        private string _message;
    
        /// <summary>A code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A descriptive message. Preferably in Dutch and English</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ValidationMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValidationMessage>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresMatchItemGemeente : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
        private Gemeentenaam _gemeentenaam = new Gemeentenaam();
    
        /// <summary>the object identifier of the coupled municipality</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled municipality</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the municipality name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Gemeentenaam Gemeentenaam
        {
            get { return _gemeentenaam; }
            set 
            {
                if (_gemeentenaam != value)
                {
                    _gemeentenaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresMatchItemGemeente FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresMatchItemGemeente>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresMatchItemPostinfo : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
    
        /// <summary>the object identifier of the coupled postal information object</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled postal information object</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresMatchItemPostinfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresMatchItemPostinfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresMatchItemStraatnaam : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
        private Straatnaam _straatnaam = new Straatnaam();
    
        /// <summary>the object identifier of the coupled street name</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled street name</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the street name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Straatnaam Straatnaam
        {
            get { return _straatnaam; }
            set 
            {
                if (_straatnaam != value)
                {
                    _straatnaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresMatchItemStraatnaam FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresMatchItemStraatnaam>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdresseerbaarObject : System.ComponentModel.INotifyPropertyChanged
    {
        private AdresseerbaarObjectObjectType _objectType;
        private string _objectId;
        private string _detail;
    
        /// <summary>the object type of the coupled resource</summary>
        [Newtonsoft.Json.JsonProperty("objectType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdresseerbaarObjectObjectType ObjectType
        {
            get { return _objectType; }
            set 
            {
                if (_objectType != value)
                {
                    _objectType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the object identifier of the coupled resource</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled resource</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdresseerbaarObject FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdresseerbaarObject>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListCrabHuisnummerRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _objectId;
        private int? _offset;
        private int? _limit;
    
        /// <summary>filter: the CRAB HuisnummerId</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the index of the first instance to return</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Offset
        {
            get { return _offset; }
            set 
            {
                if (_offset != value)
                {
                    _offset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the maximum number of instances to return</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 3500)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListCrabHuisnummerRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListCrabHuisnummerRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CrabHuisnummerCollectie : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<CrabHuisnummerCollectieItem> _crabHuisnummers = new System.Collections.ObjectModel.ObservableCollection<CrabHuisnummerCollectieItem>();
        private long _totaalAantal;
        private string _volgende;
    
        /// <summary>collection of CrabHuisnummer instances (count lower or equal to limit)</summary>
        [Newtonsoft.Json.JsonProperty("crabHuisnummers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<CrabHuisnummerCollectieItem> CrabHuisnummers
        {
            get { return _crabHuisnummers; }
            set 
            {
                if (_crabHuisnummers != value)
                {
                    _crabHuisnummers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the total number of CRAB huisnummers matching the request</summary>
        [Newtonsoft.Json.JsonProperty("totaalAantal", Required = Newtonsoft.Json.Required.Always)]
        public long TotaalAantal
        {
            get { return _totaalAantal; }
            set 
            {
                if (_totaalAantal != value)
                {
                    _totaalAantal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL for retrieving the next subset</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Volgende
        {
            get { return _volgende; }
            set 
            {
                if (_volgende != value)
                {
                    _volgende = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CrabHuisnummerCollectie FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CrabHuisnummerCollectie>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CrabHuisnummerCollectieItem : System.ComponentModel.INotifyPropertyChanged
    {
        private int _objectId;
        private CrabHuisnummerSubadresAdres _adres = new CrabHuisnummerSubadresAdres();
    
        /// <summary>the CRAB HuisnummerId</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        public int ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the corresponding address</summary>
        [Newtonsoft.Json.JsonProperty("adres", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CrabHuisnummerSubadresAdres Adres
        {
            get { return _adres; }
            set 
            {
                if (_adres != value)
                {
                    _adres = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CrabHuisnummerCollectieItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CrabHuisnummerCollectieItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CrabHuisnummerSubadresAdres : System.ComponentModel.INotifyPropertyChanged
    {
        private bool _isVolledig;
        private Identificator _identificator = new Identificator();
        private string _detail;
        private string _huisnummer;
        private string _busnummer;
        private VolledigAdres _volledigAdres = new VolledigAdres();
    
        /// <summary>true if the address is complete (has status and position)</summary>
        [Newtonsoft.Json.JsonProperty("isVolledig", Required = Newtonsoft.Json.Required.Always)]
        public bool IsVolledig
        {
            get { return _isVolledig; }
            set 
            {
                if (_isVolledig != value)
                {
                    _isVolledig = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the identifier of the address</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the address</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the house number</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Huisnummer
        {
            get { return _huisnummer; }
            set 
            {
                if (_huisnummer != value)
                {
                    _huisnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the mailbox number</summary>
        [Newtonsoft.Json.JsonProperty("busnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Busnummer
        {
            get { return _busnummer; }
            set 
            {
                if (_busnummer != value)
                {
                    _busnummer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the representation of an address in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("volledigAdres", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public VolledigAdres VolledigAdres
        {
            get { return _volledigAdres; }
            set 
            {
                if (_volledigAdres != value)
                {
                    _volledigAdres = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CrabHuisnummerSubadresAdres FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CrabHuisnummerSubadresAdres>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListCrabSubadresRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _objectId;
        private int? _offset;
        private int? _limit;
    
        /// <summary>filter: the CRAB SubadresId</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the index of the first instance to return</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Offset
        {
            get { return _offset; }
            set 
            {
                if (_offset != value)
                {
                    _offset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the maximum number of instances to return</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 3500)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListCrabSubadresRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListCrabSubadresRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CrabSubadresCollectie : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<CrabSubadresCollectieItem> _crabSubadressen = new System.Collections.ObjectModel.ObservableCollection<CrabSubadresCollectieItem>();
        private long _totaalAantal;
        private string _volgende;
    
        /// <summary>collection of CrabSubadress instances (count lower or equal to limit)</summary>
        [Newtonsoft.Json.JsonProperty("crabSubadressen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<CrabSubadresCollectieItem> CrabSubadressen
        {
            get { return _crabSubadressen; }
            set 
            {
                if (_crabSubadressen != value)
                {
                    _crabSubadressen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the total number of CRAB subaddresses matching the request</summary>
        [Newtonsoft.Json.JsonProperty("totaalAantal", Required = Newtonsoft.Json.Required.Always)]
        public long TotaalAantal
        {
            get { return _totaalAantal; }
            set 
            {
                if (_totaalAantal != value)
                {
                    _totaalAantal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL for retrieving the next subset</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Volgende
        {
            get { return _volgende; }
            set 
            {
                if (_volgende != value)
                {
                    _volgende = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CrabSubadresCollectie FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CrabSubadresCollectie>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CrabSubadresCollectieItem : System.ComponentModel.INotifyPropertyChanged
    {
        private int _objectId;
        private CrabHuisnummerSubadresAdres _adres = new CrabHuisnummerSubadresAdres();
    
        /// <summary>the CRAB SubadresId</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        public int ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the corresponding address</summary>
        [Newtonsoft.Json.JsonProperty("adres", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CrabHuisnummerSubadresAdres Adres
        {
            get { return _adres; }
            set 
            {
                if (_adres != value)
                {
                    _adres = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CrabSubadresCollectieItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CrabSubadresCollectieItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LatestGebouwRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
    
        /// <summary>the object identifier of the building</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LatestGebouwRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LatestGebouwRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains the details of a building.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GebouwDetail : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private Polygon _geometriePolygoon = new Polygon();
        private GebouwDetailGeometrieMethode _geometrieMethode;
        private GebouwDetailGebouwStatus _gebouwStatus;
        private System.Collections.ObjectModel.ObservableCollection<GebouwDetailGebouweenheid> _gebouweenheden;
        private System.Collections.ObjectModel.ObservableCollection<GebouwDetailPerceel> _percelen;
    
        /// <summary>the identifier of the building</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the building geometry (a simple polygon with Lambert-72 coordinates)</summary>
        [Newtonsoft.Json.JsonProperty("geometriePolygoon", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Polygon GeometriePolygoon
        {
            get { return _geometriePolygoon; }
            set 
            {
                if (_geometriePolygoon != value)
                {
                    _geometriePolygoon = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the method used to provide the geometry</summary>
        [Newtonsoft.Json.JsonProperty("geometrieMethode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GebouwDetailGeometrieMethode GeometrieMethode
        {
            get { return _geometrieMethode; }
            set 
            {
                if (_geometrieMethode != value)
                {
                    _geometrieMethode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the current phase in the lifecycle of the building</summary>
        [Newtonsoft.Json.JsonProperty("gebouwStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GebouwDetailGebouwStatus GebouwStatus
        {
            get { return _gebouwStatus; }
            set 
            {
                if (_gebouwStatus != value)
                {
                    _gebouwStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a collection of building units that reside within the building</summary>
        [Newtonsoft.Json.JsonProperty("gebouweenheden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GebouwDetailGebouweenheid> Gebouweenheden
        {
            get { return _gebouweenheden; }
            set 
            {
                if (_gebouweenheden != value)
                {
                    _gebouweenheden = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a collection of parcels that lie underneath the building</summary>
        [Newtonsoft.Json.JsonProperty("percelen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GebouwDetailPerceel> Percelen
        {
            get { return _percelen; }
            set 
            {
                if (_percelen != value)
                {
                    _percelen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GebouwDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GebouwDetail>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>depending on the Content-Type a GML3 polygon or a GeoJSON polygon</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Polygon : System.ComponentModel.INotifyPropertyChanged
    {
        private GeoJSONPolygon _polygon1 = new GeoJSONPolygon();
    
        /// <summary>a GeoJSON polygon</summary>
        [Newtonsoft.Json.JsonProperty("polygon", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoJSONPolygon Polygon1
        {
            get { return _polygon1; }
            set 
            {
                if (_polygon1 != value)
                {
                    _polygon1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Polygon FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Polygon>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GebouwDetailGebouweenheid : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
    
        /// <summary>the object identifier of the coupled building unit</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled building unit</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GebouwDetailGebouweenheid FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GebouwDetailGebouweenheid>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GebouwDetailPerceel : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
    
        /// <summary>the object identifier of the coupled parcel</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled parcel</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GebouwDetailPerceel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GebouwDetailPerceel>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeoJSONPolygon : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<double>>> _coordinates;
        private string _type;
        private Crs _crs;
    
        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<double>>> Coordinates
        {
            get { return _coordinates; }
            set 
            {
                if (_coordinates != value)
                {
                    _coordinates = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("crs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Crs Crs
        {
            get { return _crs; }
            set 
            {
                if (_crs != value)
                {
                    _crs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoJSONPolygon FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoJSONPolygon>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListGebouwRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _offset;
        private int? _limit;
    
        /// <summary>the index of the first instance to return</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Offset
        {
            get { return _offset; }
            set 
            {
                if (_offset != value)
                {
                    _offset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the maximum number of instances to return</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 3500)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListGebouwRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListGebouwRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains a subset of buildings.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GebouwCollectie : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<GebouwCollectieItem> _gebouwen = new System.Collections.ObjectModel.ObservableCollection<GebouwCollectieItem>();
        private long _totaalAantal;
        private string _volgende;
    
        /// <summary>collection of building instances (count lower or equal to Limit)</summary>
        [Newtonsoft.Json.JsonProperty("gebouwen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<GebouwCollectieItem> Gebouwen
        {
            get { return _gebouwen; }
            set 
            {
                if (_gebouwen != value)
                {
                    _gebouwen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the total number of buildings matching the request</summary>
        [Newtonsoft.Json.JsonProperty("totaalAantal", Required = Newtonsoft.Json.Required.Always)]
        public long TotaalAantal
        {
            get { return _totaalAantal; }
            set 
            {
                if (_totaalAantal != value)
                {
                    _totaalAantal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL for retrieving the next subset</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Volgende
        {
            get { return _volgende; }
            set 
            {
                if (_volgende != value)
                {
                    _volgende = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GebouwCollectie FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GebouwCollectie>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains a single building.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GebouwCollectieItem : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private string _detail;
    
        /// <summary>the identifier of the building</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of a single building</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GebouwCollectieItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GebouwCollectieItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LatestGebouweenheidRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
    
        /// <summary>the object identifier of the building unit</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LatestGebouweenheidRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LatestGebouweenheidRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GebouweenheidDetail : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private Point _geometriePunt = new Point();
        private GebouweenheidDetailPositieGeometrieMethode _positieGeometrieMethode;
        private GebouweenheidDetailGebouweenheidStatus _gebouweenheidStatus;
        private GebouweenheidDetailFunctie _functie;
        private GebouweenheidDetailGebouw _gebouw = new GebouweenheidDetailGebouw();
        private System.Collections.ObjectModel.ObservableCollection<GebouweenheidDetailAdres> _adressen;
    
        /// <summary>the identifier of the building unit</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The building unit geometry (a point with Lambert-72 coordinates)</summary>
        [Newtonsoft.Json.JsonProperty("geometriePunt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Point GeometriePunt
        {
            get { return _geometriePunt; }
            set 
            {
                if (_geometriePunt != value)
                {
                    _geometriePunt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the method used to provide the position</summary>
        [Newtonsoft.Json.JsonProperty("positieGeometrieMethode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GebouweenheidDetailPositieGeometrieMethode PositieGeometrieMethode
        {
            get { return _positieGeometrieMethode; }
            set 
            {
                if (_positieGeometrieMethode != value)
                {
                    _positieGeometrieMethode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the current phase in the lifecycle of the building unit</summary>
        [Newtonsoft.Json.JsonProperty("gebouweenheidStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GebouweenheidDetailGebouweenheidStatus GebouweenheidStatus
        {
            get { return _gebouweenheidStatus; }
            set 
            {
                if (_gebouweenheidStatus != value)
                {
                    _gebouweenheidStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the function of the building unit in reality (as observed on site)</summary>
        [Newtonsoft.Json.JsonProperty("functie", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GebouweenheidDetailFunctie Functie
        {
            get { return _functie; }
            set 
            {
                if (_functie != value)
                {
                    _functie = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>building wherein the building unit resides</summary>
        [Newtonsoft.Json.JsonProperty("gebouw", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GebouweenheidDetailGebouw Gebouw
        {
            get { return _gebouw; }
            set 
            {
                if (_gebouw != value)
                {
                    _gebouw = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a collection of addresses that are coupled to the building unit</summary>
        [Newtonsoft.Json.JsonProperty("adressen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GebouweenheidDetailAdres> Adressen
        {
            get { return _adressen; }
            set 
            {
                if (_adressen != value)
                {
                    _adressen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GebouweenheidDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GebouweenheidDetail>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GebouweenheidDetailGebouw : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
    
        /// <summary>the object identifier of the coupled building</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled building</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GebouweenheidDetailGebouw FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GebouweenheidDetailGebouw>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GebouweenheidDetailAdres : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
    
        /// <summary>the object identifier of the coupled address</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled address</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GebouweenheidDetailAdres FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GebouweenheidDetailAdres>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListGebouweenheidRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _adresObjectId;
        private int? _offset;
        private int? _limit;
    
        /// <summary>filter: the object identifier of the coupled address</summary>
        [Newtonsoft.Json.JsonProperty("adresObjectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdresObjectId
        {
            get { return _adresObjectId; }
            set 
            {
                if (_adresObjectId != value)
                {
                    _adresObjectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the index of the first instance to return</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Offset
        {
            get { return _offset; }
            set 
            {
                if (_offset != value)
                {
                    _offset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the maximum number of instances to return</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 3500)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListGebouweenheidRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListGebouweenheidRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains a subset of building units.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GebouweenheidCollectie : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<GebouweenheidCollectieItem> _gebouweenheden = new System.Collections.ObjectModel.ObservableCollection<GebouweenheidCollectieItem>();
        private long _totaalAantal;
        private string _volgende;
    
        /// <summary>collection of building unit instances (count lower or equal to Limit)</summary>
        [Newtonsoft.Json.JsonProperty("gebouweenheden", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<GebouweenheidCollectieItem> Gebouweenheden
        {
            get { return _gebouweenheden; }
            set 
            {
                if (_gebouweenheden != value)
                {
                    _gebouweenheden = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the total number of building units matching the request</summary>
        [Newtonsoft.Json.JsonProperty("totaalAantal", Required = Newtonsoft.Json.Required.Always)]
        public long TotaalAantal
        {
            get { return _totaalAantal; }
            set 
            {
                if (_totaalAantal != value)
                {
                    _totaalAantal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL for retrieving the next subset</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Volgende
        {
            get { return _volgende; }
            set 
            {
                if (_volgende != value)
                {
                    _volgende = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GebouweenheidCollectie FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GebouweenheidCollectie>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains a single building unit.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GebouweenheidCollectieItem : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private string _detail;
    
        /// <summary>the identifier of the building unit</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of a single building unit</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GebouweenheidCollectieItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GebouweenheidCollectieItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LatestGemeenteRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
    
        /// <summary>the id of the municipality</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LatestGemeenteRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LatestGemeenteRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GemeenteDetail : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private System.Collections.ObjectModel.ObservableCollection<GeografischeNaam> _gemeentenamen = new System.Collections.ObjectModel.ObservableCollection<GeografischeNaam>();
        private GemeenteDetailGemeenteStatus _gemeenteStatus;
    
        /// <summary>the identifier of the municipality</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the offical names of the municipality</summary>
        [Newtonsoft.Json.JsonProperty("gemeentenamen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<GeografischeNaam> Gemeentenamen
        {
            get { return _gemeentenamen; }
            set 
            {
                if (_gemeentenamen != value)
                {
                    _gemeentenamen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the phase if the lifecycle of the municipality</summary>
        [Newtonsoft.Json.JsonProperty("gemeenteStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GemeenteDetailGemeenteStatus GemeenteStatus
        {
            get { return _gemeenteStatus; }
            set 
            {
                if (_gemeenteStatus != value)
                {
                    _gemeenteStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GemeenteDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GemeenteDetail>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListGemeenteRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _offset;
        private int? _limit;
    
        /// <summary>the index of the first instance to return</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Offset
        {
            get { return _offset; }
            set 
            {
                if (_offset != value)
                {
                    _offset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the maximum number of instances to return</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 3500)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListGemeenteRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListGemeenteRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains a subset of municipalities.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GemeenteCollectie : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<GemeenteCollectieItem> _gemeenten = new System.Collections.ObjectModel.ObservableCollection<GemeenteCollectieItem>();
        private long _totaalAantal;
        private string _volgende;
    
        /// <summary>collection of municipality instances (count lower or equal to Limit)</summary>
        [Newtonsoft.Json.JsonProperty("gemeenten", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<GemeenteCollectieItem> Gemeenten
        {
            get { return _gemeenten; }
            set 
            {
                if (_gemeenten != value)
                {
                    _gemeenten = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the total number of municipalities matching the request</summary>
        [Newtonsoft.Json.JsonProperty("totaalAantal", Required = Newtonsoft.Json.Required.Always)]
        public long TotaalAantal
        {
            get { return _totaalAantal; }
            set 
            {
                if (_totaalAantal != value)
                {
                    _totaalAantal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL for retrieving the next subset</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Volgende
        {
            get { return _volgende; }
            set 
            {
                if (_volgende != value)
                {
                    _volgende = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GemeenteCollectie FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GemeenteCollectie>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GemeenteCollectieItem : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private string _detail;
        private Gemeentenaam _gemeentenaam = new Gemeentenaam();
    
        /// <summary>the identifier of the municipality</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of a single municipality</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the municipality name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Gemeentenaam Gemeentenaam
        {
            get { return _gemeentenaam; }
            set 
            {
                if (_gemeentenaam != value)
                {
                    _gemeentenaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GemeenteCollectieItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GemeenteCollectieItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LatestPerceelRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
    
        /// <summary>the object identifier of the parcel (= CaPaKey with forward slash [/] replaced by a dash [-])</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LatestPerceelRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LatestPerceelRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PerceelDetail : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private PerceelDetailPerceelStatus _perceelStatus;
        private System.Collections.ObjectModel.ObservableCollection<PerceelDetailAdres> _adressen;
    
        /// <summary>the identifier of the parcel</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the current phase in the lifecycle of the parcel</summary>
        [Newtonsoft.Json.JsonProperty("perceelStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PerceelDetailPerceelStatus PerceelStatus
        {
            get { return _perceelStatus; }
            set 
            {
                if (_perceelStatus != value)
                {
                    _perceelStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a collection of addresses that are coupled to the parcel</summary>
        [Newtonsoft.Json.JsonProperty("adressen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PerceelDetailAdres> Adressen
        {
            get { return _adressen; }
            set 
            {
                if (_adressen != value)
                {
                    _adressen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PerceelDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PerceelDetail>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PerceelDetailAdres : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
    
        /// <summary>the object identifier of the coupled address</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled address</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PerceelDetailAdres FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PerceelDetailAdres>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListPerceelRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _offset;
        private int? _limit;
    
        /// <summary>the index of the first instance to return</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Offset
        {
            get { return _offset; }
            set 
            {
                if (_offset != value)
                {
                    _offset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the maximum number of instances to return</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 3500)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListPerceelRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListPerceelRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains a subset of parcels.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PerceelCollectie : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<PerceelCollectieItem> _percelen = new System.Collections.ObjectModel.ObservableCollection<PerceelCollectieItem>();
        private long _totaalAantal;
        private string _volgende;
    
        /// <summary>collection of parcel instances (count lower or equal to Limit)</summary>
        [Newtonsoft.Json.JsonProperty("percelen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<PerceelCollectieItem> Percelen
        {
            get { return _percelen; }
            set 
            {
                if (_percelen != value)
                {
                    _percelen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the total number of parcels</summary>
        [Newtonsoft.Json.JsonProperty("totaalAantal", Required = Newtonsoft.Json.Required.Always)]
        public long TotaalAantal
        {
            get { return _totaalAantal; }
            set 
            {
                if (_totaalAantal != value)
                {
                    _totaalAantal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL for retrieving the next subset</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Volgende
        {
            get { return _volgende; }
            set 
            {
                if (_volgende != value)
                {
                    _volgende = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PerceelCollectie FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PerceelCollectie>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PerceelCollectieItem : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private string _detail;
    
        /// <summary>the identifier of the parcel</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of a single parcel</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PerceelCollectieItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PerceelCollectieItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LatestPostinfoRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
    
        /// <summary>the object identifier of the postal information object (= postal code)</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LatestPostinfoRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LatestPostinfoRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostinfoDetail : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private System.Collections.ObjectModel.ObservableCollection<Postnaam> _postnamen = new System.Collections.ObjectModel.ObservableCollection<Postnaam>();
        private PostinfoDetailPostInfoStatus _postInfoStatus;
    
        /// <summary>the identifier of the postal information object</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the names of the postal area in multiple languages</summary>
        [Newtonsoft.Json.JsonProperty("postnamen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Postnaam> Postnamen
        {
            get { return _postnamen; }
            set 
            {
                if (_postnamen != value)
                {
                    _postnamen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the current phase in the lifecycle of the postal information object</summary>
        [Newtonsoft.Json.JsonProperty("postInfoStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PostinfoDetailPostInfoStatus PostInfoStatus
        {
            get { return _postInfoStatus; }
            set 
            {
                if (_postInfoStatus != value)
                {
                    _postInfoStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PostinfoDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostinfoDetail>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Postnaam : System.ComponentModel.INotifyPropertyChanged
    {
        private GeografischeNaam _geografischeNaam = new GeografischeNaam();
    
        /// <summary>the geographical name</summary>
        [Newtonsoft.Json.JsonProperty("geografischeNaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeografischeNaam GeografischeNaam
        {
            get { return _geografischeNaam; }
            set 
            {
                if (_geografischeNaam != value)
                {
                    _geografischeNaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Postnaam FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Postnaam>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListPostinfoRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _gemeentenaam;
        private int? _offset;
        private int? _limit;
    
        /// <summary>filter: municipality name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gemeentenaam
        {
            get { return _gemeentenaam; }
            set 
            {
                if (_gemeentenaam != value)
                {
                    _gemeentenaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the index of the first instance to return</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Offset
        {
            get { return _offset; }
            set 
            {
                if (_offset != value)
                {
                    _offset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the maximum number of instances to return</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 3500)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListPostinfoRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListPostinfoRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains a subset of postal information objects.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostinfoCollectie : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<PostInfoCollectieItem> _postInfoObjecten = new System.Collections.ObjectModel.ObservableCollection<PostInfoCollectieItem>();
        private int _totaalAantal;
        private string _volgende;
    
        /// <summary>collection of postal information instances (count lower or equal to Limit)</summary>
        [Newtonsoft.Json.JsonProperty("postInfoObjecten", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<PostInfoCollectieItem> PostInfoObjecten
        {
            get { return _postInfoObjecten; }
            set 
            {
                if (_postInfoObjecten != value)
                {
                    _postInfoObjecten = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the total number of postal information objects matching the request</summary>
        [Newtonsoft.Json.JsonProperty("totaalAantal", Required = Newtonsoft.Json.Required.Always)]
        public int TotaalAantal
        {
            get { return _totaalAantal; }
            set 
            {
                if (_totaalAantal != value)
                {
                    _totaalAantal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL for retrieving the next subset</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Volgende
        {
            get { return _volgende; }
            set 
            {
                if (_volgende != value)
                {
                    _volgende = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PostinfoCollectie FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostinfoCollectie>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostInfoCollectieItem : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private string _detail;
        private System.Collections.ObjectModel.ObservableCollection<Postnaam> _postnamen = new System.Collections.ObjectModel.ObservableCollection<Postnaam>();
    
        /// <summary>the identifier of the postal information object</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of a single postal information object</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the postal area names in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("postnamen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Postnaam> Postnamen
        {
            get { return _postnamen; }
            set 
            {
                if (_postnamen != value)
                {
                    _postnamen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PostInfoCollectieItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostInfoCollectieItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LatestStraatnaamRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
    
        /// <summary>the object identifier of the street name</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LatestStraatnaamRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LatestStraatnaamRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains the details of a street name.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StraatnaamDetail : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private StraatnaamDetailGemeente _gemeente = new StraatnaamDetailGemeente();
        private System.Collections.ObjectModel.ObservableCollection<GeografischeNaam> _straatnamen = new System.Collections.ObjectModel.ObservableCollection<GeografischeNaam>();
        private System.Collections.ObjectModel.ObservableCollection<GeografischeNaam> _homoniemToevoegingen;
        private StraatnaamDetailStraatnaamStatus _straatnaamStatus;
    
        /// <summary>the identifier of the street name</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the municipality by whom the street name was assigned</summary>
        [Newtonsoft.Json.JsonProperty("gemeente", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StraatnaamDetailGemeente Gemeente
        {
            get { return _gemeente; }
            set 
            {
                if (_gemeente != value)
                {
                    _gemeente = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the street name in multiple languages</summary>
        [Newtonsoft.Json.JsonProperty("straatnamen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<GeografischeNaam> Straatnamen
        {
            get { return _straatnamen; }
            set 
            {
                if (_straatnamen != value)
                {
                    _straatnamen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the homonym additions to the street names in multiple languages</summary>
        [Newtonsoft.Json.JsonProperty("homoniemToevoegingen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GeografischeNaam> HomoniemToevoegingen
        {
            get { return _homoniemToevoegingen; }
            set 
            {
                if (_homoniemToevoegingen != value)
                {
                    _homoniemToevoegingen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the current phase in the lifecycle of the street name</summary>
        [Newtonsoft.Json.JsonProperty("straatnaamStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraatnaamDetailStraatnaamStatus StraatnaamStatus
        {
            get { return _straatnaamStatus; }
            set 
            {
                if (_straatnaamStatus != value)
                {
                    _straatnaamStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StraatnaamDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StraatnaamDetail>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StraatnaamDetailGemeente : System.ComponentModel.INotifyPropertyChanged
    {
        private string _objectId;
        private string _detail;
        private Gemeentenaam _gemeentenaam = new Gemeentenaam();
    
        /// <summary>the object identifier of the coupled municipality</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ObjectId
        {
            get { return _objectId; }
            set 
            {
                if (_objectId != value)
                {
                    _objectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of the coupled municipality</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the municipality name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Gemeentenaam Gemeentenaam
        {
            get { return _gemeentenaam; }
            set 
            {
                if (_gemeentenaam != value)
                {
                    _gemeentenaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StraatnaamDetailGemeente FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StraatnaamDetailGemeente>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListStraatnaamRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _gemeentenaam;
        private int? _offset;
        private int? _limit;
    
        /// <summary>filter: municipality name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gemeentenaam
        {
            get { return _gemeentenaam; }
            set 
            {
                if (_gemeentenaam != value)
                {
                    _gemeentenaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the index of the first instance to return</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Offset
        {
            get { return _offset; }
            set 
            {
                if (_offset != value)
                {
                    _offset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the maximum number of instances to return</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 3500)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListStraatnaamRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListStraatnaamRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Contains a subset of street names.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StraatnaamCollectie : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<StraatnaamCollectieItem> _straatnamen = new System.Collections.ObjectModel.ObservableCollection<StraatnaamCollectieItem>();
        private long _totaalAantal;
        private string _volgende;
    
        /// <summary>collection of street name instances (count lower or equal to Limit)</summary>
        [Newtonsoft.Json.JsonProperty("straatnamen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<StraatnaamCollectieItem> Straatnamen
        {
            get { return _straatnamen; }
            set 
            {
                if (_straatnamen != value)
                {
                    _straatnamen = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the total number of street names matching the request</summary>
        [Newtonsoft.Json.JsonProperty("totaalAantal", Required = Newtonsoft.Json.Required.Always)]
        public long TotaalAantal
        {
            get { return _totaalAantal; }
            set 
            {
                if (_totaalAantal != value)
                {
                    _totaalAantal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL for retrieving the next subset</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Volgende
        {
            get { return _volgende; }
            set 
            {
                if (_volgende != value)
                {
                    _volgende = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StraatnaamCollectie FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StraatnaamCollectie>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StraatnaamCollectieItem : System.ComponentModel.INotifyPropertyChanged
    {
        private Identificator _identificator = new Identificator();
        private string _detail;
        private Straatnaam _straatnaam = new Straatnaam();
        private HomoniemToevoeging _homoniemToevoeging;
    
        /// <summary>the identifier of the street name</summary>
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Identificator Identificator
        {
            get { return _identificator; }
            set 
            {
                if (_identificator != value)
                {
                    _identificator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL returning the details of the latest version of a single street name</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Detail
        {
            get { return _detail; }
            set 
            {
                if (_detail != value)
                {
                    _detail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the street name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Straatnaam Straatnaam
        {
            get { return _straatnaam; }
            set 
            {
                if (_straatnaam != value)
                {
                    _straatnaam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the homonym addition to the street name in Dutch</summary>
        [Newtonsoft.Json.JsonProperty("homoniemToevoeging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomoniemToevoeging HomoniemToevoeging
        {
            get { return _homoniemToevoeging; }
            set 
            {
                if (_homoniemToevoeging != value)
                {
                    _homoniemToevoeging = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StraatnaamCollectieItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StraatnaamCollectieItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AdresDetailPositieGeometrieMethode
    {
        [System.Runtime.Serialization.EnumMember(Value = "AangeduidDoorBeheerder")]
        AangeduidDoorBeheerder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AfgeleidVanObject")]
        AfgeleidVanObject = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Geïnterpoleerd")]
        Geïnterpoleerd = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AdresDetailPositieSpecificatie
    {
        [System.Runtime.Serialization.EnumMember(Value = "Gemeente")]
        Gemeente = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Straat")]
        Straat = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Perceel")]
        Perceel = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Lot")]
        Lot = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Standplaats")]
        Standplaats = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ligplaats")]
        Ligplaats = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gebouw")]
        Gebouw = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gebouweenheid")]
        Gebouweenheid = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ingang")]
        Ingang = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Wegsegment")]
        Wegsegment = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AdresDetailAdresStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Voorgesteld")]
        Voorgesteld = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InGebruik")]
        InGebruik = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gehistoreerd")]
        Gehistoreerd = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GeografischeNaamTaal
    {
        [System.Runtime.Serialization.EnumMember(Value = "NL")]
        NL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FR")]
        FR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "EN")]
        EN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DE")]
        DE = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AdresMatchItemPositieSpecificatie
    {
        [System.Runtime.Serialization.EnumMember(Value = "Gemeente")]
        Gemeente = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Straat")]
        Straat = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Perceel")]
        Perceel = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Lot")]
        Lot = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Standplaats")]
        Standplaats = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ligplaats")]
        Ligplaats = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gebouw")]
        Gebouw = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gebouweenheid")]
        Gebouweenheid = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ingang")]
        Ingang = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Wegsegment")]
        Wegsegment = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AdresMatchItemPositieGeometrieMethode
    {
        [System.Runtime.Serialization.EnumMember(Value = "AangeduidDoorBeheerder")]
        AangeduidDoorBeheerder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AfgeleidVanObject")]
        AfgeleidVanObject = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Geïnterpoleerd")]
        Geïnterpoleerd = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AdresMatchItemAdresStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Voorgesteld")]
        Voorgesteld = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InGebruik")]
        InGebruik = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gehistoreerd")]
        Gehistoreerd = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AdresseerbaarObjectObjectType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Gebouweenheid")]
        Gebouweenheid = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Perceel")]
        Perceel = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Standplaats")]
        Standplaats = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ligplaats")]
        Ligplaats = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GebouwDetailGeometrieMethode
    {
        [System.Runtime.Serialization.EnumMember(Value = "IngemetenGRB")]
        IngemetenGRB = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ingeschetst")]
        Ingeschetst = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ingemeten")]
        Ingemeten = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GebouwDetailGebouwStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Gepland")]
        Gepland = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InAanbouw")]
        InAanbouw = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gerealiseerd")]
        Gerealiseerd = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gehistoreerd")]
        Gehistoreerd = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "NietGerealiseerd")]
        NietGerealiseerd = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GebouweenheidDetailPositieGeometrieMethode
    {
        [System.Runtime.Serialization.EnumMember(Value = "AangeduidDoorBeheerder")]
        AangeduidDoorBeheerder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AfgeleidVanObject")]
        AfgeleidVanObject = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Geïnterpoleerd")]
        Geïnterpoleerd = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GebouweenheidDetailGebouweenheidStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Gepland")]
        Gepland = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gerealiseerd")]
        Gerealiseerd = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gehistoreerd")]
        Gehistoreerd = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "NietGerealiseerd")]
        NietGerealiseerd = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GebouweenheidDetailFunctie
    {
        [System.Runtime.Serialization.EnumMember(Value = "NietGekend")]
        NietGekend = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "GemeenschappelijkDeel")]
        GemeenschappelijkDeel = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GemeenteDetailGemeenteStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "InGebruik")]
        InGebruik = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gehistoreerd")]
        Gehistoreerd = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Voorgesteld")]
        Voorgesteld = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PerceelDetailPerceelStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Gerealiseerd")]
        Gerealiseerd = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gehistoreerd")]
        Gehistoreerd = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PostinfoDetailPostInfoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Gerealiseerd")]
        Gerealiseerd = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gehistoreerd")]
        Gehistoreerd = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.41.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StraatnaamDetailStraatnaamStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Voorgesteld")]
        Voorgesteld = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InGebruik")]
        InGebruik = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Gehistoreerd")]
        Gehistoreerd = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}